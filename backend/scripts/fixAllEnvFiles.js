const fs = require("fs");
const path = require("path");

// Danh s√°ch c√°c service c·∫ßn s·ª≠a
const services = [
  { name: "user-service", expectedDb: "qlpt_user_service" },
  { name: "apartment-service", expectedDb: "qlpt_apartment_service" },
  { name: "payment-service", expectedDb: "qlpt_payment_service" },
];

// H√†m ƒë·ªçc file .env
function readEnvFile(servicePath) {
  const envPath = path.join(__dirname, "..", "services", servicePath, ".env");
  if (fs.existsSync(envPath)) {
    return {
      path: envPath,
      content: fs.readFileSync(envPath, "utf8"),
    };
  }
  return null;
}

// H√†m s·ª≠a URI k·∫øt n·ªëi
function fixMongoUri(content, expectedDb) {
  const mongoUriMatch = content.match(/MONGO_URI=(.+)/);
  if (!mongoUriMatch) {
    return {
      status: "error",
      message: "Kh√¥ng t√¨m th·∫•y MONGO_URI trong file .env",
      content,
    };
  }

  const uri = mongoUriMatch[1].trim();

  // Ki·ªÉm tra xem URI c√≥ ch·ª©a t√™n database kh√¥ng
  const dbMatch = uri.match(/mongodb(\+srv)?:\/\/[^/]+\/([^?]+)/);
  if (!dbMatch) {
    return {
      status: "error",
      message: "Kh√¥ng th·ªÉ ph√¢n t√≠ch URI ƒë·ªÉ t√¨m t√™n database",
      content,
    };
  }

  const dbName = dbMatch[2];

  if (dbName === expectedDb) {
    return {
      status: "ok",
      message: `URI ƒë√£ ch·ª©a t√™n database ƒë√∫ng: ${dbName}`,
      content,
    };
  } else {
    const fixedUri = uri.replace(`/${dbName}`, `/${expectedDb}`);
    const fixedContent = content.replace(
      `MONGO_URI=${uri}`,
      `MONGO_URI=${fixedUri}`
    );

    return {
      status: "fixed",
      message: `ƒê√£ s·ª≠a URI t·ª´ ${dbName} th√†nh ${expectedDb}`,
      content: fixedContent,
      oldUri: uri,
      newUri: fixedUri,
    };
  }
}

// H√†m s·ª≠a file .env
function fixEnvFile(serviceName, expectedDb) {
  console.log(`=== Ki·ªÉm tra v√† s·ª≠a ${serviceName} ===`);

  const envFile = readEnvFile(serviceName);
  if (!envFile) {
    console.error(`Kh√¥ng t√¨m th·∫•y file .env cho ${serviceName}`);
    return false;
  }

  console.log(`ƒê√£ t√¨m th·∫•y file .env: ${envFile.path}`);

  const result = fixMongoUri(envFile.content, expectedDb);

  if (result.status === "ok") {
    console.log(`‚úÖ ${result.message}`);
    return true;
  } else if (result.status === "fixed") {
    console.log(`üîß ${result.message}`);
    console.log(`URI c≈©: ${result.oldUri}`);
    console.log(`URI m·ªõi: ${result.newUri}`);

    // Ghi file .env m·ªõi
    fs.writeFileSync(envFile.path, result.content);
    console.log(`‚úÖ ƒê√£ s·ª≠a file ${envFile.path}`);

    return true;
  } else {
    console.error(`‚ùå ${result.message}`);
    return false;
  }
}

// H√†m s·ª≠a t·∫•t c·∫£ c√°c file .env
function fixAllEnvFiles() {
  console.log("B·∫Øt ƒë·∫ßu s·ª≠a URI k·∫øt n·ªëi MongoDB trong c√°c file .env...\n");

  let success = true;

  services.forEach((service) => {
    const result = fixEnvFile(service.name, service.expectedDb);
    if (!result) {
      success = false;
    }
    console.log("");
  });

  if (success) {
    console.log("\n‚úÖ ƒê√£ s·ª≠a t·∫•t c·∫£ c√°c file .env th√†nh c√¥ng!");
    console.log("B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script kh·ªüi t·∫°o database:");
    console.log("node backend/scripts/initAllDbs.js");
  } else {
    console.log("\n‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi s·ª≠a c√°c file .env!");
    console.log("Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file .env v√† s·ª≠a th·ªß c√¥ng.");
  }
}

// Ch·∫°y s·ª≠a
fixAllEnvFiles();
